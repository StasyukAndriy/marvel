{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","components/hooks/http.hook.js","components/skeleton/Skeleton.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_apiBase","_apiKey","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","res","json","clearError","useHttp","getAllCharacters","offset","data","results","map","item","_transformCharacter","getCharacter","id","getAllComics","getComic","char","comics","charNeeded","title","price","prices","pageCount","name","items","wiki","urls","description","slice","thumbnail","path","extension","homepage","Skeleton","className","View","imgStyle","href","RandomChar","setChar","marvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoading","onCharListLoaded","newCharList","ended","length","arr","onCharSelected","renderItems","disabled","i","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","setSelectedChar"],"mappings":"iGAAe,UAA0B,kC,OCQ1BA,IANM,WACjB,OACI,qBAAKC,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAAQC,UAAW,UAAWC,OAAQ,UAAYC,IAAKC,EAAKC,IAAI,Y,mFCuCjHC,IA1CW,WACtB,IAAMC,EAAW,4CACXC,EAAU,0CAEjB,ECJoB,WACnB,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAAUC,sBAAW,uCAAC,WAAOC,GAAP,iCAAAC,EAAA,6DAAWC,EAAX,+BAAoB,MAAOC,EAA3B,+BAAkC,KAAMC,EAAxC,+BAAkD,CAAC,eAAgB,oBAE3FT,GAAW,GAFa,kBAIHU,MAAML,EAAK,CAACE,SAAQC,OAAMC,YAJvB,cAIhBE,EAJgB,iBAKRA,EAAIC,OALI,eAKpBD,EALoB,OAMpBX,GAAW,GANS,kBAObW,GAPa,kCASnBT,GAAS,GACTF,GAAW,GAVQ,0DAAD,sDAexB,IAIH,MAAO,CAACD,UAASE,QAAOY,WAHLT,uBAAY,WAC3BF,GAAS,KACV,IACiCC,WDlBSW,GAAvCf,EAAP,EAAOA,QAASI,EAAhB,EAAgBA,QAASF,EAAzB,EAAyBA,MAAOY,EAAhC,EAAgCA,WACzBE,EAAgB,uCAAG,0CAAAT,EAAA,6DAAOU,EAAP,+BAFL,IAEK,SACHb,EAAQ,GAAD,OAAIP,EAAJ,qCAAyCoB,EAAzC,YAAmDnB,IADvD,cACfc,EADe,yBAEdA,EAAIM,KAAKC,QAAQC,KAAI,SAAAC,GAAI,OAAEC,EAAoBD,GAAM,OAFvC,2CAAH,qDAKhBE,EAAY,uCAAG,WAAOC,GAAP,eAAAjB,EAAA,sEACCH,EAAQ,GAAD,OAAIP,EAAJ,sBAA0B2B,EAA1B,YAAgC1B,IADxC,cACXc,EADW,yBAEVU,EAAoBV,EAAIM,KAAKC,QAAQ,IAAI,IAF/B,2CAAH,sDAIZM,EAAY,uCAAG,WAAOR,GAAP,eAAAV,EAAA,sEACCH,EAAQ,GAAD,OAAIP,EAAJ,kCAAsCoB,EAAtC,YAAgDnB,IADxD,cACXc,EADW,yBAETA,EAAIM,KAAKC,QAAQC,KAAI,SAAAC,GAAI,OAAEC,EAAoBD,GAAM,OAF5C,2CAAH,sDAIZK,EAAQ,uCAAG,WAAOF,GAAP,eAAAjB,EAAA,sEACKH,EAAQ,GAAD,OAAIP,EAAJ,mBAAuB2B,EAAvB,YAA6B1B,IADzC,cACPc,EADO,yBAELU,EAAoBV,EAAIM,KAAKC,QAAQ,IAAI,IAFpC,2CAAH,sDAIRG,EAAsB,SAACK,GAAwB,IAAlBC,EAAiB,wDAE3CC,EAAcD,EAIhB,CAACE,MAAOH,EAAKG,MAAQC,MAAOJ,EAAKK,OAAO,GAAGD,MAAOE,UAAWN,EAAKM,WAJzC,CAC5BC,KAAMP,EAAKO,KACXN,OAAQD,EAAKC,OAAOO,MACpBC,KAAMT,EAAKU,KAAK,GAAG/B,KAGnB,OAAO,2BACAuB,GADP,IAEIL,GAAIG,EAAKH,GACTc,YAAaX,EAAKW,YAAL,UAAsBX,EAAKW,YAAYC,MAAM,EAAG,KAAhD,OAA4D,6CACzEC,UAAWb,EAAKa,UAAUC,KAAO,IAAMd,EAAKa,UAAUE,UACtDC,SAAUhB,EAAKU,KAAK,GAAG/B,OAI/B,MAAM,CAACN,UAASE,QAAOc,mBAAkBO,eAAcT,aAAYW,eAAcC,c,gCExCrF,iBAmBekB,IAjBE,WACb,OACI,qCACI,mBAAGC,UAAU,eAAb,0DACA,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,kC,oKCbhB,G,MAAA,IAA0B,qC,OCoEnCC,EAAO,SAAC,GAAY,IAAXnB,EAAU,EAAVA,KACJO,EAAgDP,EAAhDO,KAAMI,EAA0CX,EAA1CW,YAAaE,EAA6Bb,EAA7Ba,UAAWG,EAAkBhB,EAAlBgB,SAAUP,EAAQT,EAARS,KAC3CW,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdP,IACAO,EAAW,CAAC,UAAc,YAI1B,sBAAKF,UAAU,oBAAf,UACI,qBAAKpD,IAAK+C,EAAW7C,IAAI,mBAAmBkD,UAAU,kBAAkB1D,MAAO4D,IAC/E,sBAAKF,UAAU,mBAAf,UACI,mBAAGA,UAAU,mBAAb,SAAiCX,IACjC,mBAAGW,UAAU,oBAAb,SACKP,IAEL,sBAAKO,UAAU,mBAAf,UACI,mBAAGG,KAAML,EAAUE,UAAU,sBAA7B,SACI,qBAAKA,UAAU,QAAf,wBAEJ,mBAAGG,KAAMZ,EAAMS,UAAU,2BAAzB,SACI,qBAAKA,UAAU,QAAf,8BAQTI,EAxFI,WACf,MAAwBlD,mBAAS,IAAjC,mBAAO4B,EAAP,KAAauB,EAAb,KAEMC,EAAiBvD,cAChBI,EAA4CmD,EAA5CnD,QAASE,EAAmCiD,EAAnCjD,MAAqBY,GAAcqC,EAA5B5B,aAA4B4B,EAAdrC,YAErCsC,qBAAU,WACNC,MACD,IASJ,IAAOC,EAAe,SAAC3B,GAClBuB,EAAQvB,IAIN0B,EAAa,WACfvC,IACA,IAAMU,EAAK+B,KAAKC,MAAM,IAAAD,KAAKE,SAAiC,QAC5DN,EACK5B,aAAaC,GACbkC,KAAKJ,IAMJK,EAAezD,EAAQ,cAAChB,EAAA,EAAD,IAAkB,KACzC0E,EAAU5D,EAAU,cAAC6D,EAAA,EAAD,IAAa,KACjCC,EAAY9D,GAAWE,EAA+B,KAAtB,cAAC,EAAD,CAAMyB,KAAMA,IAElD,OACI,sBAAKkB,UAAU,aAAf,UACKc,EACAC,EACAE,EACD,sBAAKjB,UAAU,qBAAf,UACI,oBAAGA,UAAU,oBAAb,wCAC+B,uBAD/B,4CAIA,mBAAGA,UAAU,oBAAb,mCAGA,wBAAQkB,QAASV,EAAYR,UAAU,sBAAvC,SACI,qBAAKA,UAAU,QAAf,sBAEJ,qBAAKpD,IAAKuE,EAASrE,IAAI,UAAUkD,UAAU,kC,QCiChDoB,G,MAxFE,SAACC,GACd,MAAgCnE,mBAAS,IAAzC,mBAAOoE,EAAP,KAAiBC,EAAjB,KACA,EAA4CrE,oBAAS,GAArD,mBAAOsE,EAAP,KAAuBC,EAAvB,KACA,EAA4BvE,mBAAS,KAArC,mBAAOkB,EAAP,KAAesD,EAAf,KACA,EAAkCxE,oBAAS,GAA3C,mBAAOyE,EAAP,KAAkBC,EAAlB,KAEMtB,EAAiBvD,cAChBI,EAAoCmD,EAApCnD,QAASE,EAA2BiD,EAA3BjD,MAA2BiD,EAApBnC,iBACtBoC,qBAAU,WACPsB,EAAUzD,GAAQ,KAClB,IAGJ,IAAMyD,EAAY,SAACzD,EAAQ0D,GACtBC,EAAkBD,GACjBxB,EAAcnC,iBAAiBC,GAC5ByC,KAAKmB,IAGRD,EAAoB,SAACD,GAEbL,GAAVK,IAGEE,EAAmB,SAACC,GACtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAEZX,GAAY,SAAAD,GAAQ,4BAAQA,GAAR,YAAqBW,OACzCR,GAAkB,SAAAD,GAAc,OAAI,KACpCE,GAAU,SAAAtD,GAAM,OAAIA,EAAS,KAC7BwD,GAAa,SAAAD,GAAS,OAAIO,MAiC1B,IAAM5C,EA5BV,SAAqB8C,GACjB,IAAM9C,EAAS8C,EAAI7D,KAAI,SAACC,GACpB,IAAI0B,EAAW,CAAC,UAAc,SAK9B,MAJuB,wEAAnB1B,EAAKmB,YACLO,EAAW,CAAC,UAAc,UAI1B,qBACIF,UAAU,aAEVkB,QAAS,kBAAMG,EAAMgB,eAAe7D,EAAKG,KAH7C,UAIQ,qBAAK/B,IAAK4B,EAAKmB,UAAW7C,IAAK0B,EAAKa,KAAM/C,MAAO4D,IACjD,qBAAKF,UAAU,aAAf,SAA6BxB,EAAKa,SAHjCb,EAAKG,OAQtB,OACI,oBAAIqB,UAAU,aAAd,SACKV,IAQKgD,CAAYhB,GAEpBR,EAAezD,EAAQ,cAAChB,EAAA,EAAD,IAAkB,KACzC0E,EAAU5D,IAAYqE,EAAiB,cAACR,EAAA,EAAD,IAAa,KAG1D,OACI,sBAAKhB,UAAU,aAAf,UACKc,EACAC,EACAzB,EACD,wBACIU,UAAU,mCACVuC,SAAUf,EACVlF,MAAO,CAAC,QAAWqF,EAAY,OAAS,SACxCT,QAAS,kBAAMW,EAAUzD,IAJ7B,SAKI,qBAAK4B,UAAU,QAAf,8B,QCrCdC,G,MAAO,SAAC,GAAY,IAAXnB,EAAU,EAAVA,KACJO,EAAwDP,EAAxDO,KAAMI,EAAkDX,EAAlDW,YAAaE,EAAqCb,EAArCa,UAAWG,EAA0BhB,EAA1BgB,SAAUP,EAAgBT,EAAhBS,KAAMR,EAAUD,EAAVC,OAEjDmB,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdP,IACAO,EAAW,CAAC,UAAc,YAI1B,qCACI,sBAAKF,UAAU,eAAf,UACI,qBAAKpD,IAAK+C,EAAW7C,IAAKuC,EAAM/C,MAAO4D,IACvC,gCACI,qBAAKF,UAAU,kBAAf,SAAkCX,IAClC,sBAAKW,UAAU,aAAf,UACI,mBAAGG,KAAML,EAAUE,UAAU,sBAA7B,SACI,qBAAKA,UAAU,QAAf,wBAEJ,mBAAGG,KAAMZ,EAAMS,UAAU,2BAAzB,SACI,qBAAKA,UAAU,QAAf,6BAKhB,qBAAKA,UAAU,cAAf,SACKP,IAEL,qBAAKO,UAAU,eAAf,qBACA,qBAAIA,UAAU,oBAAd,UACKjB,EAAOoD,OAAS,EAAI,KAAO,yCAExBpD,EAAOR,KAAI,SAACC,EAAMgE,GAEd,KAAIA,EAAI,GACR,OACI,oBAAYxC,UAAU,oBAAtB,SACKxB,EAAKa,MADDmD,cAWtBC,EAvFE,SAACpB,GACb,MAAwBnE,mBAAS,MAAjC,mBAAO4B,EAAP,KAAauB,EAAb,KACMC,EAAiBvD,cAChBI,EAAgCmD,EAAhCnD,QAASE,EAAuBiD,EAAvBjD,MAAuBiD,EAAhB5B,aAExB6B,qBAAU,WACNC,MACD,CAACa,EAAMqB,SAGV,IAAMlC,EAAa,WACf,IAAOkC,EAAUrB,EAAVqB,OACFA,GAMLpC,EACK5B,aAAagE,GACb7B,KAAKJ,IAGRA,EAAe,SAAC3B,GAClBuB,EAAQvB,IAGF6D,EAAW7D,GAAQ3B,GAAWE,EAAQ,KAAO,cAAC0C,EAAA,EAAD,IAC7Ce,EAAezD,EAAQ,cAAChB,EAAA,EAAD,IAAkB,KACzC0E,EAAU5D,EAAU,cAAC6D,EAAA,EAAD,IAAa,KACjCC,EAAY9D,GAAWE,IAAUyB,EAA8B,KAAtB,cAAC,EAAD,CAAMA,KAAMA,IAE3D,OACI,sBAAKkB,UAAU,aAAf,UACK2C,EACA7B,EACAC,EACAE,M,gCCtBF2B,E,4MApBXC,MAAQ,CACJxF,OAAO,G,uDAGX,SAAkBA,EAAOyF,GACrBC,QAAQC,IAAI3F,EAAOyF,GACnBG,KAAKC,SAAS,CACV7F,OAAO,M,oBAIf,WACI,OAAI4F,KAAKJ,MAAMxF,MACJ,cAAChB,EAAA,EAAD,IAGJ4G,KAAK5B,MAAM8B,a,GAjBEC,aCyBbC,UAvBE,WACb,MAAwCnG,mBAAS,MAAjD,mBAAOoG,EAAP,KAAqBC,EAArB,KACA,EAA0CrG,mBAAS,MAAnD,6BAIA,OACI,qCACY,cAAC,EAAD,UACI,cAAC,EAAD,MAEJ,sBAAK8C,UAAU,gBAAf,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUqC,eAVX,SAAC1D,GACpB4E,EAAgB5E,QAWA,cAAC,EAAD,UACI,cAAC,EAAD,CAAU+D,OAAQY","file":"static/js/4.421f1cb1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from \"../components/hooks/http.hook\";\nconst  useMarvelService = ()=> {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n   const  _apiKey = 'apikey=819ee378801c4aadd6729d3195b30ff9';\n   const  _baseOffset = 210;\n   const {loading, request, error, clearError} = useHttp();\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(item=>_transformCharacter(item, false));\n    }\n   \n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0], false);\n    }\n    const getAllComics = async (offset) =>{\n        const res = await request(`${_apiBase}/comics?limit=9&offset=${offset}&${_apiKey}`);\n        return  res.data.results.map(item=>_transformCharacter(item, true))\n    }\n    const getComic = async (id) =>{\n        const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\n        return  _transformCharacter(res.data.results[0], true)\n    }\n   const  _transformCharacter = (char, comics=false) => {\n     \n       const charNeeded = !comics ? {\n        name: char.name,\n        comics: char.comics.items,\n        wiki: char.urls[1].url,\n       } : {title: char.title,  price: char.prices[0].price, pageCount: char.pageCount} \n           \n        return {\n            ...charNeeded,\n            id: char.id,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character' ,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n           \n        }\n    }\n    return{loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\nexport const useHttp = ()=>{\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(false)\r\n    const request = useCallback(async (url,method = 'GET', body = null, headers = {'Content-Type': 'application/json'})=>{\r\n\r\n        setLoading(true)\r\n         try{\r\n            let res  = await fetch(url, {method, body, headers})\r\n            res = await res.json()\r\n            setLoading(false)\r\n            return res;\r\n         }catch(e){\r\n             setError(true)\r\n             setLoading(false)\r\n            //  throw e;\r\n         }\r\n         \r\n       \r\n    }, [])\r\n    const clearError = useCallback(()=>{\r\n        setError(false)\r\n    }, [])\r\n    return {loading, error, clearError, request}\r\n}\r\n\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = ()=> {\n    const [char, setChar] = useState({})\n    \n    const marvelService =  useMarvelService();\n    const {loading, error, getCharacter, clearError} = marvelService;\n    // console.log(cleanError)\n    useEffect(()=>{\n        updateChar();\n    }, [])\n      \n        // this.timerId = setInterval(this.updateChar, 15000);\n    \n\n    // componentWillUnmount() {\n    //     clearInterval(this.timerId);\n    // }\n\n   const  onCharLoaded = (char) => {\n        setChar(char)\n       \n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        marvelService\n            .getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n   \n\n        \n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props)=>{\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n   \n    const marvelService =  useMarvelService();\n    const {loading ,error, getAllCharacters} = marvelService;\n     useEffect(()=>{\n        onRequest(offset, true)\n     }, [])\n   \n\n    const onRequest = (offset, initial) => {\n         onCharListLoading(initial);\n          marvelService.getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoading = (initial) => {\n\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n                \n            return (\n                <li \n                    className=\"char__item\"\n                    key={item.id}\n                    onClick={() => props.onCharSelected(item.id)}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    \n\n        \n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n        // const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    \n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\n\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\n\nconst CharInfo = (props)=> {\n     const [char, setChar] = useState(null)\n     const marvelService =  useMarvelService();\n     const {loading, error, getCharacter} = marvelService;\n     \n    useEffect(()=>{\n        updateChar()\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n     \n\n        marvelService\n            .getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\"\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport { useState } from \"react\";\r\nconst MainPage = ()=>{\r\n    const [selectedChar, setSelectedChar] = useState(null)\r\n    const [selectedComic, setSelectedComic] = useState(null)\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id)\r\n    }\r\n    return(\r\n        <>\r\n                    <ErrorBoundary>\r\n                        <RandomChar/>\r\n                    </ErrorBoundary>\r\n                    <div className=\"char__content\">\r\n                        <ErrorBoundary>\r\n                            <CharList onCharSelected={onCharSelected}/>\r\n                        </ErrorBoundary>\r\n                        <ErrorBoundary>\r\n                            <CharInfo charId={selectedChar}/>\r\n                        </ErrorBoundary>\r\n                        \r\n                    </div>\r\n        </>            \r\n    )\r\n}\r\nexport default MainPage;"],"sourceRoot":""}